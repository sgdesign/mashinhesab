/*
 * Copyright 2017 Tran Le Duy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package edu.hws.jcm.data;

/**
 * An object of type Cases stores a list of "case values" that is generated
 * while an expression is being evaluated using the routine Expression.getValuesWithCases().
 * This information can be used as a heuristic (i.e. a fudge) to help detect
 * a possible discontinuity between two evaluations of the expression.  Suppose
 * that the expression is evaluated twice, with some change of variable values
 * between the two evaluations.  If the variables' values are not changed too much,
 * and if the Cases objects generated by the two evaluations are equal (as determined
 * by the "equals" method defined in this class), then it is likely that
 * there is no discontinuity.  (However, this is not perfect.  The discontinuity
 * in 1/x^2 won't be detected since the case value generated by 1/f(x) only
 * checks the sign of f(x), and the denominator of 1/x^2 is positive on both
 * sides of x=0.  If you want to be more paranoid, check both the expression
 * and its derivative.)  (I really don't like this very much, but it can be used to draw
 * pretty good graphs in general.)
 */
public class Cases {  
   private int[] cases = new int[1];  // Array of values that have been added with addCase(value).
   private int caseCt;                // Number of items stored in cases array.

   /**
    * Remove all the cases that have been added with addCase().
    * This makes it possible to reuse this object in another
    * call to Expression.getValueWithCases().
    */
   public void clear() {
     caseCt = 0;
   }

   /**
    * Add a new case value to the list stored in this object.
    */
   public void addCase(int value) {
     if (caseCt == cases.length) {
        int[] temp = new int[2*caseCt];
        System.arraycopy(cases,0,temp,0,caseCt);
        cases = temp;
     }
     cases[caseCt++] = value;
   }

   /**
    * Test whether c contains exactly the same list of case
    * values as this Cases object does.
    */
   public boolean equals(Cases c) {
     if (c.caseCt != caseCt)
        return false;
     for (int i = 0; i < caseCt; i++)
        if (c.cases[i] != cases[i])
           return false;
     return true;
   }

} // end class Cases
